'use strict';

// tests for createLetter
// Generated by serverless-mocha-plugin

const mochaPlugin = require('serverless-mocha-plugin');
const sinon = require('sinon');
const expect = mochaPlugin.chai.expect;
const request = require('request-promise-native');
const fs = require('fs');
const uuid = require('uuid');
let wrapped = mochaPlugin.getWrapper('createLetter', '/handler.js', 'createLetter');

//let validJsonBody = {"name":"Test McTesterson","email":"test@test.com","subject":"Comments regarding 1234 Abundant Avenue","content":"To whom it may concern:\n\nThis is just a short note to express my support for 1234 Abundant Avenue. The project is near my work in West Point Grey. \n\nThis project deserves to be approved for the reasons listed below:\n- Central, walkable neighbourhoods like this are the best places to build more homes\n- We desperately need more rental homes in Vancouver\n\n1234 Abundant Avenue deserves to be approved, but some things could be improved:\n- I would like the project to have more family-sized units\n- It's disappointing that a project like this requires a rezoning\n\nSincerely yours,\nTest McTesterson\n4567 Fake Street, Vancouver. V5T 0A1 ","join":false,"recipients":["reilly.wood@icloud.com","reilly.p.wood@gmail.com"]}

function readJsonFile(fileName) {
  let rawdata = fs.readFileSync(fileName);  
  return JSON.parse(rawdata.toString());  
}

function readTextFile(fileName) {
  return fs.readFileSync(fileName).toString();
}

describe('createLetter', () => {
  before((done) => {
    done();
  });

  it('works when passed valid JSON', () => {
    const mockId = '00000000-0000-0000-0000-000000000000';
    const mockCurrentTime = new Date(2018,1,1);
    var event = { 
      headers: { "content-type": "application/json" }, 
      body: readTextFile('test/createLetterValidInputBody.json')
    }

    const requestStub = sinon.stub(request, 'post').resolves();

    // lock down the timestamp and unique ID in the request call
    sinon.stub(Date, 'now').returns(mockCurrentTime); 
    sinon.stub(uuid, 'v4').returns(mockId);

    return wrapped.run(event).then((response) => {
      expect(response.statusCode).to.be.equal(200);
      expect(requestStub.calledOnce).to.be.true;
      const requestParam = requestStub.firstCall.args[0];
      expect(requestParam.url).to.be.equal(process.env.SLACK_WEBHOOK_URL);

      console.log(requestParam.body);
      
      var parsedBody = requestParam.body;
      var expectedBody = readJsonFile('test/createLetterExpectedRequestBody.json');

      expect(parsedBody).to.deep.equal(expectedBody);
      
      expect(requestParam.json).to.be.true;
      
    });
  });

  it('fails when given a non-JSON body', () => {
    var event = { headers: { "content-type": "application/json" }, body: "asdf" }
    return wrapped.run(event).then((response) => {
      expect(response.statusCode).to.be.equal(400);
      expect(response.body).to.be.equal("Bad request: request is not valid JSON");
    });
  });
});
